// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/viacep.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/viacep.go -destination ./internal/services/mocks/viacep.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	services "github.com/arfurlaneto/goexpert-challenge-temperature-by-cep/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockViaCepService is a mock of ViaCepService interface.
type MockViaCepService struct {
	ctrl     *gomock.Controller
	recorder *MockViaCepServiceMockRecorder
}

// MockViaCepServiceMockRecorder is the mock recorder for MockViaCepService.
type MockViaCepServiceMockRecorder struct {
	mock *MockViaCepService
}

// NewMockViaCepService creates a new mock instance.
func NewMockViaCepService(ctrl *gomock.Controller) *MockViaCepService {
	mock := &MockViaCepService{ctrl: ctrl}
	mock.recorder = &MockViaCepServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViaCepService) EXPECT() *MockViaCepServiceMockRecorder {
	return m.recorder
}

// QueryCep mocks base method.
func (m *MockViaCepService) QueryCep(ctx context.Context, cep string) (*services.ViaCepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCep", ctx, cep)
	ret0, _ := ret[0].(*services.ViaCepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCep indicates an expected call of QueryCep.
func (mr *MockViaCepServiceMockRecorder) QueryCep(ctx, cep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCep", reflect.TypeOf((*MockViaCepService)(nil).QueryCep), ctx, cep)
}
