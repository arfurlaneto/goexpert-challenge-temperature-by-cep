// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/weatherapi.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/weatherapi.go -destination ./internal/services/mocks/weatherapi.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	services "github.com/arfurlaneto/goexpert-challenge-temperature-by-cep/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherApiService is a mock of WeatherApiService interface.
type MockWeatherApiService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherApiServiceMockRecorder
}

// MockWeatherApiServiceMockRecorder is the mock recorder for MockWeatherApiService.
type MockWeatherApiServiceMockRecorder struct {
	mock *MockWeatherApiService
}

// NewMockWeatherApiService creates a new mock instance.
func NewMockWeatherApiService(ctrl *gomock.Controller) *MockWeatherApiService {
	mock := &MockWeatherApiService{ctrl: ctrl}
	mock.recorder = &MockWeatherApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherApiService) EXPECT() *MockWeatherApiServiceMockRecorder {
	return m.recorder
}

// QueryWeather mocks base method.
func (m *MockWeatherApiService) QueryWeather(ctx context.Context, location string) (*services.WeatherApiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWeather", ctx, location)
	ret0, _ := ret[0].(*services.WeatherApiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWeather indicates an expected call of QueryWeather.
func (mr *MockWeatherApiServiceMockRecorder) QueryWeather(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWeather", reflect.TypeOf((*MockWeatherApiService)(nil).QueryWeather), ctx, location)
}
